<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jayce Wong&#39;s Blog</title>
    <link>https://sysujayce.github.io/posts/</link>
    <description>Recent content in Posts on Jayce Wong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 18 Oct 2019 09:22:17 +0800</lastBuildDate>
    
	<atom:link href="https://sysujayce.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>剑指offer：不用加减乘除做加法</title>
      <link>https://sysujayce.github.io/posts/addwithoutelementaryarithmetic/</link>
      <pubDate>Fri, 18 Oct 2019 09:22:17 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/addwithoutelementaryarithmetic/</guid>
      <description>题目描述 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
# -*- coding: utf-8 -*- # @Time : 2019-10-17 20:50 # @Author : Jayce Wong # @ProjectName : job # @FileName : addWithoutElementaryArithmetic.</description>
    </item>
    
    <item>
      <title>Python中的数字系统</title>
      <link>https://sysujayce.github.io/posts/numericalsystem/</link>
      <pubDate>Thu, 17 Oct 2019 20:47:39 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/numericalsystem/</guid>
      <description>一、Python位运算操作符    操作符 意义     ~ 按位取反   | 按位或   &amp;amp; 按位与   ^ 按位异或   &amp;lt;&amp;lt; 左移   &amp;gt;&amp;gt; 右移    二、计算机中的原码、反码、补码  原码  原码是二进制数字的一种简单表示。例如8位有符号整数中，最高位为符号位，因此可以表示-127 ~ -0, +0 ~ 127共256个数字。</description>
    </item>
    
    <item>
      <title>剑指offer：不使用乘除、判断、循环进行求和</title>
      <link>https://sysujayce.github.io/posts/novelsumsolution/</link>
      <pubDate>Thu, 17 Oct 2019 11:19:11 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/novelsumsolution/</guid>
      <description>题目描述 求1+2+3+&amp;hellip;+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。
解题思路 解法1：递归 + 逻辑运算 关键在于利用逻辑与的短路规则来设置递归的出口。
这里给出我写的Python实现以及参考的C++实现
# -*- coding: utf-8 -*- # @Time : 2019-10-17 10:56 # @Author : Jayce Wong # @ProjectName : job # @FileName : sumSolution.</description>
    </item>
    
    <item>
      <title>美团2020校招笔试：字符串排序</title>
      <link>https://sysujayce.github.io/posts/meituan_stringsort/</link>
      <pubDate>Wed, 16 Oct 2019 22:09:09 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/meituan_stringsort/</guid>
      <description>题目描述 给定字符串，对其进行逆序排序。
 字符逆序是指从z到a排序，比如对两个字符串排序时，先比较第一个字符，按照字符逆序将z排在a的前面，当第一个字符相等时按照第二个字符进行排序，以此类推。
特殊情况：
  空字符串需要排在最前面； 若一个短字符串是另一个长字符串的前缀则短字符串排在前面    请自行实现代码进行排序，不可直接调用sort等排序方法。
样例 输入
waimai,dache,lvyou,liren,meishi,jiehun,lvyoujingdian,jiaopei,menpiao,jiudian
输出
waimai,menpiao,meishi,lvyou,lvyoujingdian,liren,jiudian,jiehun,jiaopei,dache
# -*- coding: utf-8 -*- # @Time : 2019-10-16 16:15 # @Author : Jayce Wong # @ProjectName : job # @FileName : meituan.</description>
    </item>
    
    <item>
      <title>剑指offer：和为S的连续正数序列</title>
      <link>https://sysujayce.github.io/posts/findcontinuoussequence/</link>
      <pubDate>Wed, 16 Oct 2019 14:43:45 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/findcontinuoussequence/</guid>
      <description>题目描述 小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
输出描述:  输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序
 # -*- coding: utf-8 -*- # @Time : 2019-10-16 14:32 # @Author : Jayce Wong # @ProjectName : job # @FileName : FindContinuousSequence.</description>
    </item>
    
    <item>
      <title>剑指offer：和为s的两个数字</title>
      <link>https://sysujayce.github.io/posts/findnumberswithsum/</link>
      <pubDate>Tue, 15 Oct 2019 22:53:57 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/findnumberswithsum/</guid>
      <description>题目描述 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。
输出描述:  对应每个测试案例，输出两个数，小的先输出。
 # -*- coding: utf-8 -*- # @Time : 2019-10-15 22:26 # @Author : Jayce Wong # @ProjectName : job # @FileName : FindNumbersWithSum.</description>
    </item>
    
    <item>
      <title>比较两个连分数的大小</title>
      <link>https://sysujayce.github.io/posts/continuedfraction/</link>
      <pubDate>Mon, 14 Oct 2019 21:47:08 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/continuedfraction/</guid>
      <description>题目描述 连分数可以表示为(a0; a1, a2, ... , an),
输入 输入n，之后是n+1个数字，分别表示a~0~, a~1~, &amp;hellip;, a~n~
输入m，之后是m+1个数字，分别表示b~0~, b~1~, &amp;hellip;, b~m~
要求比较以上两个连分数（分别记为x和y）的大小。
输出 若`x &amp;gt; y，输出 &amp;gt;，若 x &amp;lt; y，输出 &amp;lt;，否则输出 =</description>
    </item>
    
    <item>
      <title>约瑟夫环</title>
      <link>https://sysujayce.github.io/posts/josephus/</link>
      <pubDate>Mon, 14 Oct 2019 21:45:37 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/josephus/</guid>
      <description>题目描述 约瑟夫斯（Josephus）问题是一个出现在计算机科学和数学中的问题。 在计算机编程的算法中，类似问题又称为约瑟夫环。 约瑟夫斯问题：有n个囚犯站成一个圆圈，准备处决。 首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。 接着，再越过k-1个人，并杀掉第k个人。 这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。
给定了n和k，一开始要站在什么地方才能避免被处决？
# -*- coding: utf-8 -*- # @Time : 2019-09-18 21:57 # @Author : Jayce Wong # @ProjectName : job # @FileName : josephus.</description>
    </item>
    
    <item>
      <title>最长公共子串</title>
      <link>https://sysujayce.github.io/posts/longestcommonsubstring/</link>
      <pubDate>Mon, 14 Oct 2019 21:43:54 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/longestcommonsubstring/</guid>
      <description>题目描述： 给定两个字符串s1和s2，计算其最长公共子串的长度，并返回所有可能的最长公共子串。
# -*- coding: utf-8 -*- # @Time : 2019-09-22 22:57 # @Author : Jayce Wong # @ProjectName : job # @FileName : longestCommonSubstring.</description>
    </item>
    
    <item>
      <title>leetcode 1143. 最长公共子序列</title>
      <link>https://sysujayce.github.io/posts/longestcommonsubsequence/</link>
      <pubDate>Mon, 14 Oct 2019 21:40:51 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/longestcommonsubsequence/</guid>
      <description>题目描述 给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列。
一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。 例如，&amp;rdquo;ace&amp;rdquo; 是 &amp;ldquo;abcde&amp;rdquo; 的子序列，但 &amp;ldquo;aec&amp;rdquo; 不是 &amp;ldquo;abcde&amp;rdquo; 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。
若这两个字符串没有公共子序列，则返回 0。
示例 1:</description>
    </item>
    
    <item>
      <title>leetcode 5：最长回文子串</title>
      <link>https://sysujayce.github.io/posts/longestpalindromeofsubstring/</link>
      <pubDate>Mon, 14 Oct 2019 21:19:16 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/longestpalindromeofsubstring/</guid>
      <description>题目描述 给定一个字符串，找出其中最长的回文子串
Example 1: Input: &amp;quot;babad&amp;quot; Output: &amp;quot;bab&amp;quot; Note: &amp;quot;aba&amp;quot; is also a valid answer. Example 2: Input: &amp;quot;cbbd&amp;quot; Output: &amp;quot;bb&amp;quot;  # -*- coding: utf-8 -*- # @Time : 2019-10-11 10:34 # @Author : Jayce Wong # @ProjectName : job # @FileName : longestPalindromicSubstring.</description>
    </item>
    
    <item>
      <title>leetcode 409. 最长回文字符串</title>
      <link>https://sysujayce.github.io/posts/longestpalindrome/</link>
      <pubDate>Mon, 14 Oct 2019 21:10:56 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/longestpalindrome/</guid>
      <description>题目描述 给定一个字符串，问其中的字符最多能组成多长的回文字符串？
Example: Input: &amp;quot;abccccdd&amp;quot; Output: 7 解释： 其中一个最长回文字符串是 &amp;quot;dccaccd&amp;quot;, 其长度为 7.  ​``` # -*- coding: utf-8 -*- # @Time : 2019-10-11 10:56 # @Author : Jayce Wong # @ProjectName : job # @FileName : longestPalindrome.</description>
    </item>
    
    <item>
      <title>求职复习</title>
      <link>https://sysujayce.github.io/posts/intelligentinterview/</link>
      <pubDate>Mon, 14 Oct 2019 21:04:03 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/intelligentinterview/</guid>
      <description>智力题  烧绳子：有若材质一样的干根不均匀绳子，烧完一根需要1h，如何计时得到75min, 15min, 30min?
 既然不均匀，那就代表不能通过长度来直接得到30min，15min
30min：一根绳子从头烧到尾需要1h，那从两边往中间烧的话只需要30min；
15min：将绳子1的两头点燃，同时点燃绳子2的左端，当绳子1燃尽的时候过了30min，此时点燃绳子2的右端，并开始计时，当绳子2燃尽的时候就得到了15min；
75min_1：可以在得到15min之后马上点燃另一根绳子，等该绳子燃尽就可以得到75min；
75min_2：将绳子1的两头点燃，同时点燃绳子2的左端并计时，当绳子1燃尽的时候过了30min，此时点燃绳子2的右端，当绳子2燃尽的时候就得到了45min；然后再点燃绳子3的两端，当绳子3燃尽的时候就得到了75min；
 老鼠喝毒酒：有1000桶酒,其中1桶有毒.而一旦吃了,毒性会在1周后发作.现在我们用小老鼠做实验,要在1周内找出那桶毒酒,问最少需要多少老鼠?
 首先利用二进制将每桶酒进行编号，1000桶酒就需要2^10才能表示，因此需要10位。
在确定了如何对每桶酒进行编号之后，我们现在就需要确定毒酒的二进制表示中的每一位是什么。
如果我们将1000桶酒按照二进制中第k位是否为1进行划分，然后让老鼠k去喝第k位为1的所有酒，如果老鼠k死去，证明毒酒的第k位为1，否则第k位为0.
由于我们一共用了10位来表示毒酒，因此需要10只老鼠即可判断哪一桶是毒酒。
 猜纸牌：有9张纸牌，分别为1至9。A、B、C、D四人取牌，每人取2张。现已知A取的两张牌之和是10;B取的两张牌之差是1;C取的两张牌之积是24;D取的荫张牌之商是3。请说出他们四人各拿了哪两张纸牌;剩下的一张又是什么牌?</description>
    </item>
    
    <item>
      <title>leetcode 72: 最小编辑距离</title>
      <link>https://sysujayce.github.io/posts/shortesteditdistance/</link>
      <pubDate>Fri, 11 Oct 2019 23:33:58 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/shortesteditdistance/</guid>
      <description>题目描述：
给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。
你可以对一个单词进行如下三种操作：
插入一个字符 删除一个字符 替换一个字符 示例 1:
输入: word1 = &amp;ldquo;horse&amp;rdquo;, word2 = &amp;ldquo;ros&amp;rdquo; 输出: 3 解释: horse -&amp;gt; rorse (将 &amp;lsquo;h&amp;rsquo; 替换为 &amp;lsquo;r&amp;rsquo;) rorse -&amp;gt; rose (删除 &amp;lsquo;r&amp;rsquo;) rose -&amp;gt; ros (删除 &amp;lsquo;e&amp;rsquo;) 示例 2:</description>
    </item>
    
    <item>
      <title>leetcode 516. 最长回文子序列</title>
      <link>https://sysujayce.github.io/posts/longestpalindromicsubsequence/</link>
      <pubDate>Fri, 11 Oct 2019 22:45:57 +0800</pubDate>
      
      <guid>https://sysujayce.github.io/posts/longestpalindromicsubsequence/</guid>
      <description>题目描述 给定一个字符串s，找到其中最长的回文子序列
示例 1: 输入:
&amp;quot;bbbab&amp;quot;  输出:
4  一个可能的最长回文子序列为 &amp;ldquo;bbbb&amp;rdquo;。
# -*- coding: utf-8 -*- # @Time : 2019-10-11 11:58 # @Author : Jayce Wong # @ProjectName : job # @FileName : longestPalindromicSubsequence.</description>
    </item>
    
  </channel>
</rss>